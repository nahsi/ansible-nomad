- name: download nomad to localhost
  become: false
  run_once: true
  delegate_to: localhost
  get_url:
    url: "{{ _archive_url }}"
    dest: "{{ role_path }}/files/{{ _archive }}"
    checksum: "sha256:{{ _archive_checksum }}"
  register: _download_archive
  until: _download_archive is succeeded
  retries: 5
  delay: 2

- name: create vault-agent system group
  group:
    name: "{{ nomad_group }}"
    system: true
    state: present
  when: nomad_group != "root"

- name: create vault-agent system user
  user:
    name: "{{ nomad_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ nomad_group }}"
    create_home: false
    state: present
  when: nomad_group != "root"

- name: create nomad directories
  file:
    path: "{{ dir.value.path }}"
    state: directory
    owner: "{{ dir.group | default(nomad_user) }}"
    group: "{{ dir.group | default(nomad_group) }}"
    mode: "{{ dir.value.mode | default(755) }}"
  loop: "{{ nomad_dirs | dict2items }}"
  loop_control:
    loop_var: dir
    label: "{{ dir.key }}"

- name: create archive directory
  become: false
  delegate_to: localhost
  file:
    state: directory
    path: "{{ _archive_dir }}"

- name: unpack nomad
  become: false
  delegate_to: localhost
  unarchive:
    src: "{{ role_path }}/files/{{ _archive }}"
    dest: "{{ _archive_dir }}"
    creates: "{{ _archive_dir }}/nomad"

- name: propagate nomad binary
  copy:
    src: "{{ _archive_dir }}/nomad"
    dest: "/usr/bin/nomad"
    owner: root
    group: root
    mode: 0555
  notify: restart nomad

- name: delete archive directory
  become: false
  delegate_to: localhost
  file:
    dest: "{{ _archive_dir }}"
    state: absent
  when: not lookup("env", "MOLECULE_SCENARIO_NAME") | default("")

- name: create nomad config
  tags: config
  copy:
    content: "{{ nomad_config | to_nice_json }}"
    dest: "{{ nomad_dirs.main.path }}/nomad.json"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0640
  notify: restart nomad

- name: create nomad service file
  tags: config
  copy:
    content: "{{ nomad_service }}"
    dest: "/etc/init.d/nomad"
    owner: root
    group: root
    mode: 0755
  notify: restart nomad
  when: ansible_service_mgr == "openrc"

- name: enable nomad
  service:
    name: nomad
    enabled: true
  when: ansible_service_mgr == "openrc"

- name: create nomad unit file
  tags: config
  copy:
    content: "{{ nomad_unit }}"
    dest: "/etc/systemd/system/nomad.service"
    owner: root
    group: root
    mode: 0755
  notify: restart nomad
  when: ansible_service_mgr == "systemd"

- name: enable nomad
  systemd:
    name: nomad
    enabled: true
    daemon_reload: true
  when: ansible_service_mgr == "systemd"
